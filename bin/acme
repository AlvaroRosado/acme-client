#!/usr/bin/env php
<?php

use Auryn\Injector;
use League\CLImate\CLImate;

if (!file_exists(__DIR__ . "/../vendor/autoload.php")) {
    echo <<<HELP

      ____ __________ ___  ___
     / __ `/ ___/ __ `__ \/ _ \
    / /_/ / /__/ / / / / /  __/
    \__,_/\___/_/ /_/ /_/\___/

    You need to install the composer dependencies.

    composer install --no-dev


HELP;
    exit(-1);
}

require __DIR__ . "/../vendor/autoload.php";

$commands = [
    "setup",
    "issue",
    "check",
    "revoke",
];

$help = implode("\n    ", array_map(function ($command) {
    return "bin/acme {$command}";
}, $commands));

$help = <<<EOT

      ____ __________ ___  ___
     / __ `/ ___/ __ `__ \/ _ \
    / /_/ / /__/ / / / / /  __/
    \__,_/\___/_/ /_/ /_/\___/

    Usage: bin/acme command --args

    Available Commands:
    {$help}

    Get more help by appending --help to specific commands.


EOT;

$climate = new CLImate;
$injector = new Injector;

if (!in_array(PHP_SAPI, ["cli", "phpdbg"], true)) {
    $climate->error("Please run this script via CLI!");
    exit(1);
}

if (count($argv) === 1 || in_array($argv[1], ["h", "-h", "help", "--help"], true)) {
    $climate->out($help);
    exit(0);
}

if (!in_array($argv[1], $commands)) {
    $climate->br()->error("    Unknown command '{$argv[1]}'. Use --help for a list of available commands.");

    $suggestion = \Kelunik\AcmeClient\suggestCommand($argv[1], $commands);

    if ($suggestion) {
        $climate->br()->out("    Did you mean '$suggestion'?");
    }

    $climate->br();

    exit(1);
}

/** @var \Kelunik\AcmeClient\Commands\Command $class */
$class = "Kelunik\\AcmeClient\\Commands\\" . ucfirst($argv[1]);
$definition = $class::getDefinition();

try {
    $args = $argv;
    unset($args[1]);

    $climate->arguments->add($definition);
    $climate->arguments->parse(array_values($args));
} catch (Exception $e) {
    if (count($argv) === 3 && in_array($argv[2], ["h", "-h", "--help", "help"], true)) {
        $climate->usage(["bin/acme {$argv[1]}"]);
        $climate->br();

        exit(0);
    } else {
        $climate->usage(["bin/acme {$argv[1]}"]);
        $climate->br();

        $climate->error($e->getMessage());
        $climate->br();

        exit(1);
    }
}

$injector->share($climate);

$command = $injector->make($class);

Amp\run(function () use ($command, $climate) {
    $handler = function ($e) use ($climate) {
        $error = (string) $e;
        $lines = explode("\n", $error);
        $lines = array_filter($lines, function ($line) {
            return strlen($line) && $line[0] !== "#" && $line !== "Stack trace:";
        });

        foreach ($lines as $line) {
            $climate->error($line)->br();
        }

        exit(1);
    };

    try {
        yield $command->execute($climate->arguments);
    } catch (Throwable $e) {
        $handler($e);
    } catch (Exception $e) {
        $handler($e);
    }

    Amp\stop();
});
